# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


import content_based
from content_based import df
# from scrapuserreviews import collab_filter
import json
import pandas as pd
from ast import literal_eval


# with open("mydata.json", encoding="utf8") as f:
#     data = literal_eval(f.read())
# i = 0
# for d in data:
#     d['index'] = i
#     i += 1
# # print(data)
# df = pd.json_normalize(data)
# print(df)


# list of tuples(movie, index)
favMovies = []
content_rec_movies = []


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1115, 852)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.showAllList()
        self.ShowAlllistWidget.currentRowChanged.connect(self.ShowSelected1)

        self.ShowSelectList()
        self.addMovieButton()
        self.RecommList()

        self.recommend_button = QtWidgets.QPushButton(self.centralwidget)
        self.recommend_button.setGeometry(QtCore.QRect(370, 540, 171, 71))
        self.recommend_button.setText("Recommend")
        self.recommend_button.setObjectName("recommend_button")
        self.recommend_button.clicked.connect(self.RecommMovies)

        self.ShowReclistWidget.currentRowChanged.connect(self.ShowDetails)

        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(650, 280, 421, 311))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 419, 309))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.titleLabel = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.titleLabel.setGeometry(QtCore.QRect(0, 0, 421, 71))
        font = QtGui.QFont()
        font.setFamily("Perpetua")
        font.setPointSize(19)
        self.titleLabel.setFont(font)
        self.titleLabel.setObjectName("titleLabel")
        self.descriptionLabel = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.descriptionLabel.setGeometry(QtCore.QRect(4, 105, 411, 201))
        self.descriptionLabel.setObjectName("descriptionLabel")
        self.descriptionLabel.setWordWrap(True)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1115, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Selected1.setText(_translate("MainWindow", "Selected Movie"))
        self.pushButton_Add.setText(_translate("MainWindow", "Add"))
        self.pushButton_remove.setText(_translate("MainWindow", "Remove"))
        self.Selected2.setText(_translate("MainWindow", "Selected Movie"))
        self.Recommended.setText(_translate("MainWindow", "Recommended"))
        self.titleLabel.setText(_translate("MainWindow", "TextLabel"))
        self.descriptionLabel.setText(_translate("MainWindow", "TextLabel"))

    ############################################################################

    def showAllList(self):
        self.ShowAlllistWidget = QtWidgets.QListWidget(self.centralwidget)
        self.ShowAlllistWidget.setGeometry(QtCore.QRect(50, 60, 261, 381))
        self.ShowAlllistWidget.setObjectName("ShowAlllistWidget")
        for mov in df["title"]:
            QtWidgets.QListWidgetItem(mov, self.ShowAlllistWidget)

        self.Selected1 = QtWidgets.QLabel(self.centralwidget)
        self.Selected1.setGeometry(QtCore.QRect(50, 20, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto Black")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.Selected1.setFont(font)
        self.Selected1.setObjectName("Selected1")
        self.Selected1.setWordWrap(True)

    # for label above showall
    def ShowSelected1(self):
        if(self.ShowAlllistWidget.currentRow() >= 0):
            self.Selected1.setText(
                df["title"][self.ShowAlllistWidget.currentRow()])
            self.Selected1.adjustSize()

    # to show favourites list
    def ShowSelectList(self):
        self.ShowFavlistWidget = QtWidgets.QListWidget(self.centralwidget)
        self.ShowFavlistWidget.setGeometry(QtCore.QRect(50, 490, 261, 241))
        self.ShowFavlistWidget.setObjectName("ShowFavlistWidget")
        for mov in favMovies:
            QtWidgets.QListWidgetItem(mov[0], self.ShowFavlistWidget)
        self.pushButton_remove = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_remove.setGeometry(QtCore.QRect(210, 750, 93, 28))
        self.pushButton_remove.setObjectName("pushButton_remove")
        self.pushButton_remove.clicked.connect(self.RemoveMovie)
        self.Selected2 = QtWidgets.QLabel(self.centralwidget)
        self.Selected2.setGeometry(QtCore.QRect(320, 490, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto Black")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.Selected2.setFont(font)
        self.Selected2.setObjectName("Selected2")

    def addMovieButton(self):
        self.pushButton_Add = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Add.setGeometry(QtCore.QRect(220, 450, 93, 28))
        self.pushButton_Add.setObjectName("pushButton_Add")
        self.pushButton_Add.clicked.connect(self.AddMovie)

    def AddMovie(self):
        if(self.ShowAlllistWidget.currentRow() >= 0):
            index = (self.ShowAlllistWidget.currentRow())
            name = df["title"][(self.ShowAlllistWidget.currentRow())]
            if (name, index) not in favMovies:
                favMovies.append((name, index))
                QtWidgets.QListWidgetItem(name, self.ShowFavlistWidget)
                # print(favMovies)

    def RemoveMovie(self):
        if(self.ShowFavlistWidget.currentRow() >= 0):
            index = (self.ShowFavlistWidget.currentRow())
            # print(index)
            name = df["title"][(self.ShowFavlistWidget.currentRow())]
            favMovies.pop(index)
            self.ShowFavlistWidget.takeItem(index)
            # print(favMovies)

    def RecommList(self):
        self.ShowReclistWidget = QtWidgets.QListWidget(self.centralwidget)
        self.ShowReclistWidget.setGeometry(QtCore.QRect(350, 60, 251, 381))
        self.ShowReclistWidget.setObjectName("ShowReclistWidget")
        for mov in content_rec_movies:
            QtWidgets.QListWidgetItem(mov[0], self.ShowFavlistWidget)
        self.Recommended = QtWidgets.QLabel(self.centralwidget)
        self.Recommended.setGeometry(QtCore.QRect(350, 20, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto Black")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.Recommended.setFont(font)
        self.Recommended.setObjectName("Recommended")

    def RecommMovies(self):
        if self.ShowFavlistWidget.currentRow() == -1:
            return
        self.ShowReclistWidget.clear()
        global content_rec_movies
        content_rec_movies = content_based.content_rec(  # tuple of moviename and index in df
            df["title"][(self.ShowFavlistWidget.currentRow())])

        for mov in content_rec_movies:
            QtWidgets.QListWidgetItem(mov[0], self.ShowReclistWidget)

    def ShowDetails(self):

        if(self.ShowReclistWidget.currentRow() >= 0):
            # getting index of movie
            print(content_rec_movies)

            index = content_rec_movies[self.ShowReclistWidget.currentRow()][1]
            title = content_rec_movies[self.ShowReclistWidget.currentRow()][0]

            print(df)

            self.titleLabel.setText(title)
            self.titleLabel.adjustSize()
            self.descriptionLabel.setText(df["description"][index])
            


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
